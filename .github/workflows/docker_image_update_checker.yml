%YAML 1.1
---
name: 'DockerImageUpdateChecker'
# Adapted from https://github.com/marketplace/actions/docker-image-update-checker#minimal

# run daily, time is in UTC, scheduled jobs run only on the default branch
on:
  workflow_dispatch:
  schedule:
    - cron: '4 8 * * *'

env:
  TEST_TAG: rotheross/otobo:devel-11_1_test

jobs:
  CheckDockerImageUpdate:
    runs-on: 'ubuntu-latest'
    steps:

      # TODO: check rel-10_0, rel-10_1, rel-11_0 and trigger rebuilds in these branches

      -
        # this step sets ${{ steps.check.outputs.needs-updating }}
        name: Check whether base image was updated
        id: check
        uses: lucacome/docker-image-update-checker@v1
        with:
          base-image: perl:5.38-bookworm
          image: rotheross/otobo:latest-11_0

      -
        # print the result in any case
        name: Report the check result
        run: |
          echo "The OTOBO web image needs updating: ${{ steps.check.outputs.needs-updating }}"

      # TODO: early exit when nothing has to be done
      -
        # needed for BUILD_DATE
        name: Get the current date and time
        id: get_build_date
        run: echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      -
        name: Set up Docker Buildx
        if: steps.check.outputs.needs-updating == 'true'
        uses: docker/setup-buildx-action@v3

      -
        # build the image, not pushing yet, no pushing as DockerHub access is not set up yet
        # Caching with Github Actions Cache, limited to 10 GB
        name: Build
        if: steps.check.outputs.needs-updating == 'true'
        uses: docker/build-push-action@v6
        with:
          file: otobo.web.dockerfile
          pull: true
          load: true
          build-args: |
            BUILD_DATE=${{ steps.get_build_date.outputs.build_date }}
            DOCKER_TAG=${{ env.TEST_TAG }}
            GIT_REPO=${{ github.repository }}
            GIT_BRANCH=${{ github.ref_name }}
            GIT_COMMIT=${{ github.sha }}
          target: otobo-web
          tags: ${{ env.TEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max`

      -
        # otobo_first_time hasn't run yet, so /opt/otobo is still empty
        name: Info
        if: steps.check.outputs.needs-updating == 'true'
        run: |
          docker run --rm -w /opt/otobo_install/otobo_next --entrypoint /bin/bash ${{ env.TEST_TAG }} -c "more git-repo.txt git-branch.txt git-commit.txt RELEASE | cat"

      -
        # login to Docker Hub only after the build
        name: Login to Docker Hub
        if: steps.check.outputs.needs-updating == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        # finally upload to DockerHub
        # the built image is already available in the job
        name: Push to DockerHub
        if: steps.check.outputs.needs-updating == 'true'
        uses: docker/build-push-action@v6
        with:
          file: otobo.web.dockerfile
          pull: true
          push: true
          build-args: |
            BUILD_DATE=${{ steps.get_build_date.outputs.build_date }}
            DOCKER_TAG=${{ env.TEST_TAG }}
            GIT_REPO=${{ github.repository }}
            GIT_BRANCH=${{ github.ref_name }}
            GIT_COMMIT=${{ github.sha }}
          target: otobo-web
          tags: ${{ env.TEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max`
