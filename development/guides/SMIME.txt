# Overview

The directory scripts/test/sample/SMIME holds sample files for the S/MIME unit tests. The relevant S/MIME test scripts are:
- scripts/test/SMIME.t
- scripts/test/SMIME/ConvertCertFormat.t
- scripts/test/SMIME/EmailHandling.t

# How to create a multi CA environment (Root and 2 Intermediate CAs)

The sample files are based on the novel "Voyage au Centre de la Terre" by Jules Verne. The main protagonist is "Professor Otto Lidenbrock"
who teaches geology at the Johanneum in Hamburg. In our case the Johanneum offers the root CA, the science department of the school
and the cabinet of Prof. Lidenbrock are intermediate CAs. Other protaganists are Axel, Gudrun, and Martha. Axel is the one who
deciphers the secret message from Arne Saknussemm.

Finally we want to achieve the following structure:

# Johanneum
#    -> Geology
#       -> Cabinet
#---------------------------------------------------
#          -> Axel  (current user certificate)

The certificates were created with openssl.
Below are the commands which created the sample files.

## Passphrases

The pass phrases are all the string 'secret'. That phrase is stored in file like SMIMECAPrivateKeyPass-Johanneum.crt as they
are needed later in the test scripts. Note that the test scripts do not chomp the read in password files. Therefore the
passphrase must be stored without a trailing newline.

    > cd /opt/otobo/scripts/test/sample/SMIME
    > echo -n "secret" > SMIMECAPrivateKeyPass-Johanneum.crt

## Root Certificate Authority SMIMECACertificate-Johanneum

This is the self signed root CA, the thingy that has to be imported into the mail tool.

We create the certificate and the private key in a single step. The password for the private key is 'secret'.
We use 3653 days for 10 years, including the 3 leap days. By specifying -keyout we request that a private key
is generated. CA=TRUE is set automatically.

    > cd /opt/otobo/scripts/test/sample/SMIME
    > openssl req -x509 -sha512  -days 3650 -out SMIMECACertificate-Johanneum.crt -keyout SMIMECAPrivateKey-Johanneum.pem

The fingerprint is included in scripts/test/SMIME.t:

    openssl x509  -noout -fingerprint -in SMIMECACertificate-Johanneum.crt
    openssl x509  -noout -subject_hash -in SMIMECACertificate-Johanneum.crt

## Intermediate CA, the geology department of the Johanneum

First the department needs a private key.

    > openssl genrsa -out SMIMECAPrivateKey-Geology.pem

Ask the Johanneum to create a signed certificate for the geology department:

    > openssl req -new -key SMIMECAPrivateKey-Geology.pem -out SMIMECASignRequest-Geology.csr

The Johanneum kindly signs the certificate sign request and the geology department gets its signed CA certificate.
Explicitly adding the X.509 v3 extensions in a strange way.

    > echo "basicConstraints = critical, CA:true, pathlen:1" > extfile
    > openssl x509 -req -days 3653 -extfile extfile -in SMIMECASignRequest-Geology.csr -CA SMIMECACertificate-Johanneum.crt -CAkey SMIMECAPrivateKey-Johanneum.pem -set_serial 00 -out SMIMECACertificate-Geology.crt

Check with:

    > openssl x509  -noout -text -in SMIMECACertificate-Geology.crt

Again, we need the fingerprint for the test script:

    > openssl x509  -noout -fingerprint -in SMIMECACertificate-Geology.crt
    > openssl x509  -noout -subject_hash -in SMIMECACertificate-Geology.crt

## The final CA in the chain, that is the cabinet of Prof. Lidenbrock, is signed by the geology department

First the cabinet needs a private key.

    > openssl genrsa -out SMIMECAPrivateKey-Cabinet.pem

Ask the Geology department to create a signed certificate for the cabinate of Prof. Lidenbrock.

    > openssl req -new -key SMIMECAPrivateKey-Cabinet.pem -out SMIMECASignRequest-Cabinet.csr

The geology department kindly signs the certificate sign request and Prof. Lidenbrock gets his signed CA certificate.
Explicitly adding the X.509 v3 extensions in a strange way.

    > echo "basicConstraints = critical, CA:true, pathlen:0" > extfile
    > openssl x509 -req -days 3653 -extfile extfile -in SMIMECASignRequest-Cabinet.csr  -CA SMIMECACertificate-Geology.crt -CAkey SMIMECAPrivateKey-Geology.pem -set_serial 00 -out SMIMECACertificate-Cabinet.crt

As usual, we need the subject hash and the fingerprint for the test script:

    > openssl x509  -noout -text -in SMIMECACertificate-Cabinet.crt
    > openssl x509  -noout -fingerprint -in SMIMECACertificate-Cabinet.crt
    > openssl x509  -noout -subject_hash -in SMIMECACertificate-Cabinet.crt

## The user certificate for Axel is signed by the Cabinet CA

For now we only have Axel who receives crypted messages. For the email of Axel use axel@johanneum.example.org. This email
is used for seaching in scripts/test/SMIME/ConvertCertFormat.t .

    > openssl genrsa -out SMIMEUserPrivateKey-Axel.pem
    > openssl req -new -key SMIMEUserPrivateKey-Axel.pem -out SMIMEUserSignRequest-Axel.csr
    > openssl x509 -req -days 3653 -in SMIMEUserSignRequest-Axel.csr  -CA SMIMECACertificate-Cabinet.crt -CAkey SMIMECAPrivateKey-Cabinet.pem -set_serial 00 -out SMIMEUserCertificate-Axel.crt
    > openssl x509  -noout -text -in SMIMEUserCertificate-Axel.crt
    > openssl x509  -noout -fingerprint -in SMIMEUserCertificate-Axel.crt
    > openssl x509  -noout -subject_hash -in SMIMEUserCertificate-Axel.crt

## Format conversion of the user certificate

scripts/test/SMIME/ConvertCertFormat.t checks the format conversions. For creating the sample files in the required we run the conversions
manually.

    > cd scripts/test/sample/SMIME
    > openssl crl2pkcs7 -nocrl -certfile SMIMEUserCertificate-Axel.crt -out SMIMEUserCertificate-Axel.p7b
    > openssl x509 -in SMIMEUserCertificate-Axel.crt -outform der -out SMIMEUserCertificate-Axel.der
    > openssl pkcs12 -export -out SMIMEUserCertificate-Axel.pfx -inkey SMIMEUserPrivateKey-Axel.pem  -in SMIMEUserCertificate-Axel.crt -certfile SMIMECACertificate-Cabinet.crt

# See also:

- https://en.wikipedia.org/wiki/Journey_to_the_Center_of_the_Earth
- https://linuxconfig.org/how-to-generate-a-self-signed-ssl-certificate-on-linux for a tutorial.
- https://www.howtoforge.de/anleitung/mails-mit-ssl-zertifikaten-verschlusseln-smime/
- https://stackoverflow.com/questions/36920558/is-there-anyway-to-specify-basicconstraints-for-openssl-cert-via-command-line
- https://www.hasslinger.com/index.php/en/blog/ssl-zertifikate-mit-openssl-konvertieren





# Documentation based on the old version as imported in OTOBO 10.0.1

NOTE: This uses a different approach as laid out above. But let's keep it for reference.

# Configure the Root CA
mkdir OTRSCA
cd OTRSCA
mkdir certs crl newcerts private
echo "01" > serial
cp /dev/null index.txt
# beware that the location of the sample file is dependent on your environment
cp /usr/lib/ssl/openssl.cnf
# MacOSX
# /opt/local/etc/openssl/openssl.cnf
#  modify openssl.cnf as needed dir, default_bits, countryName, stateOrProvinceName, 0.organizationName_default, organizationalUnitName and emailAddress.

# Create the Root CA
# generate a private key
openssl genrsa -des3 -out private/SMIMECAPrivateKey-OTRSCARoot.pem 4096
# create a self-signed certificate valid for 10 years
openssl req -new -x509 -nodes -sha1 -days 3650 -key private/SMIMECAPrivateKey-OTRSCARoot.pem -out SMIMECACertificate-OTRSRoot.crt
# go for the default values if you adapted the settings in the openssl.cnf file or enter the values you desire
#---

# Configure Intermediate (RD) CA
cd OTRSCA
mkdir RD
cd RD
cp ../openssl.cnf
mkdir certs crl newcerts private
echo "01" > serial
cp /dev/null index.txt
#  modify openssl.cnf as needed dir, default_bits, countryName, stateOrProvinceName, 0.organizationName_default, organizationalUnitName and emailAddress.

# Create the RD CA
# generate a key
openssl genrsa -des3 -out private/SMIMECAPrivateKey-OTRSRD.pem 4096
# generate a signing request (valid for 10 years)
openssl req -new -sha1 -key private/SMIMECAPrivateKey-OTRSRD.pem -out SMIMECACertificate-OTRSRD.csr
# go for the default values if you adapted the settings in the openssl.cnf file or enter the values you desire
# sing the request to generate the certificate
mv SMIMECACertificate-OTRSRD.csr ..
cd ..
openssl ca -extensions v3_ca -days 3650 -out SMIMECACertificate-OTRSRD.csr.crt -in SMIMECACertificate-OTRSRD.csr -config openssl.cnf
# if at this point openssl complaints about different country, organization etc, please change the options in [policy_match] section from 'match' to 'supplied' mv SMIMECACertificate-OTRSRD.* RD
mv SMIMECACertificate-OTRSRD.csr RD
# ----

# Configure Intermediate (Lab) CA
cd OTRSCA
cd RD
mkdir Lab
cd Lab
cp ../openssl.cnf
mkdir certs crl newcerts private
echo "01" > serial
cp /dev/null index.txt
#  modify openssl.cnf as needed dir, default_bits, countryName, stateOrProvinceName, 0.organizationName_default, organizationalUnitName and emailAddress.

# Create the Lab CA
# generate a key
openssl genrsa -des3 -out private/SMIMECAPrivateKey-OTRSLab.pem 4096
# generate a signing request (valid for 10 years)
openssl req -new -sha1 -key private/SMIMECAPrivateKey-OTRSLab.pem -out SMIMECACertificate-OTRSLab.csr
# go for the default values if you adapted the settings in the openssl.cnf file or enter the values you desire
# sing the request to generate the certificate
mv SMIMECACertificate-OTRSLab.csr ..
cd ..
openssl ca -extensions v3_ca -days 3650 -out SMIMECACertificate-OTRSLab.csr.crt -in SMIMECACertificate-OTRSLab.csr -config openssl.cnf
# if at this point openssl complaints about different country, organization etc, please change the options in [policy_match] section from 'match' to 'supplied' mv SMIMECACertificate-OTRSLab.* Lab
mv SMIMECACertificate-OTRSLab.csr Lab
# ---

# Configure User Certificate
cd OTRSCA
cd RD
cd Lab
mkdir User
cd User
cp ../openssl.cnf
#  modify openssl.cnf as needed dir, default_bits, countryName, stateOrProvinceName, 0.organizationName_default, organizationalUnitName and emailAddress.

# Create the User Certificate
# generate a key
openssl genrsa -des3 -out private/SMIMEPrivateKey-smimeuser1.pem 4096
# generate a signing request (valid for 10 years)
openssl req -new -key SMIMEPrivateKey-smimeuser1.pem -out SMIMECertificate-smimeuser1.csr -config openssl.cnf
# sing the request to generate the certificate
mv SMIMECertificate-smimeuser1.csr ..
cd ..
openssl x509 -req -days 3650 -CA cacert.crt -CAkey private/SMIMECAPrivateKey-OTRSLab.pem -CAcreateserial -in SMIMECertificate-smimeuser1.csr  -out SMIMECertificate-smimeuser1.crt
# if at this point openssl complaints about different country, organization etc, please change the options in [policy_match] section from 'match' to 'supplied' mv SMIMECertificate-smimeuser1.* UserCertificate
mv SMIMECertificate-smimeuser1.* User
# ---
# ---
